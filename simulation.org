#+title: QDA by Projection Simulations
#+author: Ruiyang Wu

#+property: header-args :session *R:QDA by Projection* :results output silent :eval no-export

#+name: r initialization
#+begin_src R :exports none
  library(doParallel)
  library(doRNG)
  library(tidyr)
  library(dplyr)
  library(ggplot2)
  source("R/datagen_sl.R")
  source("R/data_analysis_wrapper.R")
  source("R/data_summary.R")
  source("R/resave.R")
  num_cores <- 4
  registerDoParallel(cores = num_cores)
  if (file.exists("out/simulation_summary.RData"))
    load("out/simulation_summary.RData")
#+end_src

* Simulation 1
Dimension \(p=50\). Only one direction is useful for classification,
and LDA assumption is satisfied.

There are \(n_0\) training samples and 100 test samples in class 0,
\(n_1\) training samples and 100 test samples in class 1, where
\(n_0=n_1=100,150,200,250,300\). Repeat \(m=100\) times for average
test error.

#+name: simulation 1 setup
#+begin_src R
  seed <- 2020
  p <- 50
  m <- 100
  ntest <- 500
  n <- c(100, 150, 200, 250, 300)
  mu0 <- rep(0, p)
  mu1 <- rep(1 / 3, p)
  sigma0 <- diag(p)
  sigma1 <- diag(p)
#+end_src

#+call: data generation()

#+call: models evaluation(name="sl1")

#+call: data summary[:results value replace :colnames yes](name="sl1")

#+RESULTS:
|   n | LDA          | QDA          | RDA          | DSDA         | DAP          | QDAP         | Oracle       |
|-----+--------------+--------------+--------------+--------------+--------------+--------------+--------------|
| 100 | 17.41 (0.18) | 35.79 (0.25) | 14.22 (0.16) | 17.59 (0.17) | 19.04 (0.17) | 17.46 (0.18) | 11.89 (0.10) |
| 150 | 15.37 (0.14) | 31.37 (0.20) | 13.41 (0.13) | 15.68 (0.14) | 16.74 (0.14) | 15.42 (0.14) | 11.93 (0.10) |
| 200 | 14.63 (0.13) | 28.79 (0.19) | 13.08 (0.10) | 15.00 (0.13) | 15.95 (0.15) | 14.65 (0.13) | 11.86 (0.11) |
| 250 | 14.07 (0.11) | 26.39 (0.18) | 12.84 (0.09) | 14.29 (0.12) | 15.04 (0.12) | 14.06 (0.11) | 11.72 (0.10) |
| 300 | 13.64 (0.12) | 24.63 (0.17) | 12.74 (0.11) | 13.92 (0.12) | 14.52 (0.13) | 13.67 (0.12) | 11.90 (0.11) |

* Simulation 2
# I have to change seed to 2019 for this one, or it will throw an error
# saying "error code 1 from Lapack routine 'dgesdd'". It turns out to be
# concerning rda. (no longer true)

#+name: simulation 2 setup
#+begin_src R
  seed <- 2020
  p <- 50
  m <- 100
  ntest <- 500
  n <- c(100, 150, 200, 250, 300)
  mu0 <- rep(0, p)
  mu1 <- rep(1, p)
  set.seed(seed)
  temp <- matrix(rnorm(n = p * p), nrow = p)
  sigma0 <- t(temp) %*% temp + diag(runif(n = p))
  sigma1 <- sigma0
  rm(temp)
#+end_src

#+call: data generation()

#+call: models evaluation(name="sl2")

#+call: data summary[:results value replace :colnames yes](name="sl2")

#+RESULTS:
|   n | LDA         | QDA          | RDA         | DSDA        | DAP          | QDAP        | Oracle      |
|-----+-------------+--------------+-------------+-------------+--------------+-------------+-------------|
| 100 | 9.11 (0.14) | 26.61 (0.27) | 9.49 (0.16) | 9.66 (0.17) | 26.52 (0.44) | 9.24 (0.14) | 5.31 (0.07) |
| 150 | 7.67 (0.10) | 20.22 (0.22) | 7.85 (0.10) | 8.04 (0.11) | 20.06 (0.35) | 7.69 (0.10) | 5.27 (0.06) |
| 200 | 6.98 (0.09) | 16.85 (0.17) | 7.18 (0.11) | 7.28 (0.10) | 17.30 (0.32) | 6.99 (0.09) | 5.30 (0.07) |
| 250 | 6.59 (0.08) | 14.91 (0.15) | 6.71 (0.07) | 6.80 (0.08) | 15.29 (0.26) | 6.57 (0.08) | 5.24 (0.06) |
| 300 | 6.30 (0.08) | 13.47 (0.14) | 6.41 (0.08) | 6.53 (0.08) | 13.72 (0.22) | 6.32 (0.08) | 5.32 (0.06) |

* Simulation 3

#+name: simulation 3 setup
#+begin_src R
  seed <- 2020
  p <- 50
  m <- 100
  ntest <- 500
  n <- c(100, 150, 200, 250, 300)
  mu0 <- rep(0, p)
  mu1 <- rep(1, p)
  sigma0 <- diag(p)
  sigma1 <- diag(p) + matrix(rep(2, p^2), nrow = p)
#+end_src

#+call: data generation()

#+call: models evaluation(name="sl3")

#+call: data summary[:results value replace :colnames yes](name="sl3")

#+RESULTS:
|   n | LDA          | QDA          | RDA          | DSDA         | DAP          | QDAP         | Oracle      |
|-----+--------------+--------------+--------------+--------------+--------------+--------------+-------------|
| 100 | 36.92 (0.26) | 28.38 (0.23) | 18.12 (0.15) | 24.66 (0.27) | 15.20 (0.18) | 17.16 (0.26) | 7.94 (0.08) |
| 150 | 35.02 (0.25) | 25.29 (0.20) | 18.23 (0.13) | 23.29 (0.24) | 12.34 (0.16) | 11.76 (0.16) | 8.10 (0.09) |
| 200 | 33.14 (0.28) | 23.62 (0.19) | 18.27 (0.13) | 22.70 (0.21) | 11.31 (0.15) | 10.41 (0.13) | 8.20 (0.10) |
| 250 | 31.44 (0.24) | 21.80 (0.14) | 18.12 (0.13) | 21.92 (0.15) | 10.65 (0.12) | 9.63 (0.09)  | 8.21 (0.09) |
| 300 | 30.60 (0.24) | 20.43 (0.14) | 18.16 (0.13) | 21.41 (0.16) | 10.02 (0.10) | 9.18 (0.08)  | 8.06 (0.07) |

* Simulation 4
Dimension \(p=50\). Only one direction is useful for classification,
and LDA assumption is extremely not satisfied.

There are \(n_0\) training samples and 100 test samples in class 0,
\(n_1\) training samples and 100 test samples in class 1, where
\(n_0=n_1=100,150,200,250,300\). Repeat \(m=100\) times for average
test error.

#+name: simulation 4 setup
#+begin_src R
  seed <- 2020
  p <- 50
  m <- 100
  ntest <- 500
  n <- c(100, 150, 200, 250, 300)
  mu0 <- rep(0, p)
  mu1 <- rep(0, p)
  sigma0 <- diag(p)
  sigma1 <- diag(p) + matrix(rep(2, p^2), nrow = p)
#+end_src

#+call: data generation()

#+call: models evaluation(name="sl4")

#+call: data summary[:results value replace :colnames yes](name="sl4")

#+RESULTS:
|   n | LDA          | QDA          | RDA          | DSDA         | DAP          | QDAP         | Oracle       |
|-----+--------------+--------------+--------------+--------------+--------------+--------------+--------------|
| 100 | 49.88 (0.16) | 30.59 (0.22) | 46.44 (0.48) | 49.61 (0.17) | 25.02 (0.77) | 19.53 (0.26) | 10.10 (0.08) |
| 150 | 50.42 (0.15) | 27.56 (0.20) | 46.33 (0.44) | 49.80 (0.17) | 20.39 (0.80) | 13.93 (0.16) | 9.91 (0.08)  |
| 200 | 50.17 (0.18) | 25.82 (0.16) | 46.23 (0.43) | 49.88 (0.18) | 18.45 (0.72) | 12.41 (0.12) | 9.93 (0.09)  |
| 250 | 49.95 (0.17) | 24.23 (0.17) | 47.41 (0.36) | 49.67 (0.15) | 18.02 (0.84) | 11.71 (0.11) | 10.16 (0.10) |
| 300 | 50.09 (0.16) | 23.03 (0.13) | 47.73 (0.32) | 50.04 (0.15) | 19.90 (1.15) | 11.18 (0.10) | 9.96 (0.09)  |

* Simulation 5
Three directions are useful for classification.

#+name: simulation 5 setup
#+begin_src R
  seed <- 2020
  p <- 50
  m <- 100
  ntest <- 500
  n <- c(100, 150, 200, 250, 300)
  mu0 <- rep(0, p)
  set.seed(seed)
  mu1 <- rnorm(p, sd = 1 / sqrt(50))
  sigma0 <- diag(c(10, rep(1, p - 1)))
  sigma1 <- diag(p) + matrix(rep(2, p^2), nrow = p)
#+end_src

#+call: data generation()

#+call: models evaluation(name="sl5")

#+call: data summary[:results value replace :colnames yes](name="sl5")

#+RESULTS:
|   n | LDA          | QDA          | RDA          | DSDA         | DAP          | QDAP         | Oracle      |
|-----+--------------+--------------+--------------+--------------+--------------+--------------+-------------|
| 100 | 35.82 (0.22) | 22.36 (0.19) | 35.61 (0.27) | 35.98 (0.26) | 23.07 (0.62) | 19.72 (0.25) | 7.31 (0.08) |
| 150 | 34.69 (0.22) | 18.69 (0.15) | 34.44 (0.24) | 34.83 (0.25) | 20.33 (0.66) | 14.03 (0.17) | 7.29 (0.08) |
| 200 | 32.98 (0.17) | 16.82 (0.13) | 32.81 (0.19) | 33.21 (0.19) | 18.63 (0.65) | 12.53 (0.12) | 7.14 (0.08) |
| 250 | 32.65 (0.16) | 15.58 (0.13) | 32.39 (0.17) | 32.39 (0.16) | 19.06 (0.62) | 11.89 (0.11) | 7.42 (0.08) |
| 300 | 32.00 (0.13) | 14.69 (0.11) | 31.79 (0.15) | 32.07 (0.16) | 19.57 (0.70) | 11.37 (0.10) | 7.25 (0.07) |

* Various Code Blocks
:PROPERTIES:
:APPENDIX: t
:END:
** Data Generation Code
#+name: data generation
#+begin_src R
  set.seed(seed)
  data <- datagen_sl(mu0 = mu0, mu1 = mu1,
                     sigma0 = sigma0, sigma1 = sigma1,
                     m = m, ntest = ntest, n = n)
#+end_src
** Models Evaluation Code
#+name: models evaluation
#+begin_src R :var name="foo" lda=1 qda=1 dsda=1 sqda=1 rda=1 test=0 parallel=1
  len_n <- length(n)
  pred_err <- vector("list", len_n)
  if (parallel == TRUE) {
    Sys.setenv(OMP_NUM_THREADS = 1)
    for (i in 1:len_n) {
      pred_err[[i]] <- foreach(j = 1:m, .combine = rbind,
                               .options.RNG = seed) %dorng%
        data_analysis_sl(x = data$x[[i]][[j]], y = data$y[[i]],
                         xnew = data$xnew[[i]][[j]], ynew = data$ynew[[i]],
                         oracle_rule = data$oracle_rule, lda = lda, qda = qda,
                         dsda = dsda, sqda = sqda, rda = rda)
    }
    Sys.setenv(OMP_NUM_THREADS = 4)
  } else {
    for (i in 1:len_n) {
      pred_err[[i]] <-
        data_analysis_sl(x = data$x[[i]][[1]], y = data$y[[i]],
                         xnew = data$xnew[[i]][[1]], ynew = data$ynew[[i]],
                         oracle_rule = data$oracle_rule, lda = lda, qda = qda,
                         dsda = dsda, sqda = sqda, rda = rda)
      for (j in 2:m) {
        pred_err[[i]] <-
          rbind(pred_err[[i]],
                data_analysis_sl(x = data$x[[i]][[j]], y = data$y[[i]],
                                 xnew = data$xnew[[i]][[j]], ynew = data$ynew[[i]],
                                 oracle_rule = data$oracle_rule, lda = lda, qda = qda,
                                 dsda = dsda, sqda = sqda, rda = rda))
      }
    }
  }
  obj_name <- paste0("pred_err_", name)
  assign(obj_name, pred_err)
  if (test == FALSE)
    resave(list = obj_name, file = "out/simulation_summary.RData")
#+end_src
** Data Summary Code
#+name: data summary
#+begin_src R :var name="foo"
  obj_name <- paste0("pred_err_", name)
  out <- paste0("out/", name, ".pdf")
  len_n <- length(n)
  data_summarized <- NULL
  for (i in 1:len_n) {
    data_summarized <-
      rbind(data_summarized,
            data.frame(summary_se(get(obj_name)[[i]]), n = n[i]))
  }
  pdf(out)
  pd <- position_dodge(8)
  plot <- ggplot(data_summarized, aes(x = n, y = prediction.error,
                                      colour = method)) +
    geom_errorbar(aes(ymin = prediction.error - ci.95,
                      ymax = prediction.error + ci.95),
                  width = 10, position = pd) +
    geom_line(position = pd) +
    geom_point(position = pd)
  print(plot)
  dev.off()
  data_summarized %>%
    dplyr::select(- ci.95) %>%
    mutate(prediction.error
           = format(round(prediction.error * 100, 2), nsmall = 2)) %>%
    mutate(standard.error = paste0("(", format(round(standard.error * 100, 2),
                                               nsmall = 2), ")")) %>%
    unite(col = prediction.error, prediction.error, standard.error, sep = " ") %>%
    spread(key = method, value = prediction.error)
#+end_src

* COMMENT Local Variables

# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
